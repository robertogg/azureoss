<!-- 
     This configuration file is required if iisnode is used to run node processes behind
     IIS or IIS Express.  For more information, visit:

     https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config
-->

<configuration>
     <system.webServer>
          <handlers>
               <!-- indicates that the server.js file is a node.js application to be handled by the iisnode module -->
               <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
                <add name="NtvsDebugProxy" path="ntvs-debug-proxy/6448b849-c117-4ed7-b70d-242005a8200d" verb="*" resourceType="Unspecified"
                 type="Microsoft.NodejsTools.Debugger.WebSocketProxy, Microsoft.NodejsTools.WebRole"/>
          </handlers>
          <rewrite>
               <rules>

                    <!-- Don't interfere with requests for logs -->
                    <rule name="LogFile" patternSyntax="ECMAScript" stopProcessing="true">
                         <match url="^[a-zA-Z0-9_\-]+\.js\.logs\/\d+\.txt$"/>
                    </rule>

                <!-- Don't interfere with requests for node-inspector debugging -->
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">                    
                    <match url="^server.js\/debug[\/]?" />
                </rule>
                   <clear />
                   <rule name="NtvsDebugProxy" enabled="true" stopProcessing="true">
                     <match url="^ntvs-debug-proxy/.*"/>
                   </rule>
                    <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->
                    <rule name="StaticContent">
                         <action type="Rewrite" url="public{REQUEST_URI}"/>
                    </rule>

                    <!-- All other URLs are mapped to the Node.js application entry point -->
                    <rule name="DynamicContent">
                         <conditions>
                              <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                         </conditions>
                         <action type="Rewrite" url="server.js"/>
                    </rule>
               </rules>
          </rewrite>
          <!-- You can control how Node is hosted within IIS using the following options -->
        <!--<iisnode      
          node_env="%node_env%"
          nodeProcessCommandLine="&quot;%programfiles%\nodejs\node.exe&quot;"
          nodeProcessCountPerApplication="1"
          maxConcurrentRequestsPerProcess="1024"
          maxNamedPipeConnectionRetry="3"
          namedPipeConnectionRetryDelay="2000"      
          maxNamedPipeConnectionPoolSize="512"
          maxNamedPipePooledConnectionAge="30000"
          asyncCompletionThreadCount="0"
          initialRequestBufferSize="4096"
          maxRequestBufferSize="65536"
          watchedFiles="*.js"
          uncFileChangesPollingInterval="5000"      
          gracefulShutdownTimeout="60000"
          loggingEnabled="true"
          logDirectoryNameSuffix="logs"
          debuggingEnabled="true"
          debuggerPortRange="5058-6058"
          debuggerPathSegment="debug"
          maxLogFileSizeInKB="128"
          appendToExistingLog="false"
          logFileFlushInterval="5000"
          devErrorsEnabled="true"
          flushResponse="false"      
          enableXFF="false"
          promoteServerVars=""
         />-->
        <!--<iisnode watchedFiles="*.js;node_modules\*;routes\*.js;views\*.jade"   debuggingEnabled="true"/>-->

       <iisnode watchedFiles="web.config;*.js;routes\*.js;views\*.jade"
        loggingEnabled="true"
        devErrorsEnabled="true"
        nodeProcessCommandLine="node.exe --debug"/>
       
     </system.webServer>
    <system.web>
      <httpRuntime targetFramework="4.5"/>
      <customErrors mode="Off"/>
    </system.web>
</configuration>
